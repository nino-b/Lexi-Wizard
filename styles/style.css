:root {
    --light-mode: #f0f4f8;
    --dark-mode: #1c2e4a;
    
    --primary-selection-light: #e1eff6;
    --secondary-selection-light: #c8e1f3;
    --accent-selection-light: #007bff;

    --primary-selection-dark: #2a3b5d;
    --secondary-selection-dark: #34495e;
    --accent-selection-dark: #49a9ee;
    /* ****************************************** */

    --nav-border: #10273f;
    --theme-system: #0c2036;
    --nav-text: #abc1d0;
    --text: #ffffff;

    --primary-light: #dae5fc;
    --primary-dark: #9dbff9;

    --secondary-light: #2c5270;
    --secondary-dark: #1b354b;

    --light-bg-image: linear-gradient(45deg, var(--primary-light), var(--primary-dark));
    --dark-bg-image: linear-gradient(45deg, var(--secondary-light), var(--secondary-dark));

    --button-on-hover: #5882ca;
    --active-button: #3660a9;

    --border-radius: .4rem;
    --common-padding: .5rem .8rem;
}

body {
  max-width: 100rem;
  margin: auto;
  display: flex;
  flex-flow: column;
  justify-content: space-between;
  height: 100vh;
}


/* General */
button,
a {
  cursor: pointer;
}

button {
  transition: transform .13s ease;
}
button:hover {
  transform: scale(1.05);
}
button:active {
  transform: scale(1.1);
}

/* ************************************************** */
main {
  height: 100%;
  width: 100%;
  padding: 1.5rem 2rem;
}

nav ul {
    display: flex;
    flex-flow: row wrap;
    justify-content: space-evenly;
}
header nav {
  padding: .6rem 1rem;
}
footer nav {
  padding-bottom: .2rem;
}

/* Technique: underline widening effect on hover */
.nav-item {
    /* 
    - Establish the element as a reference point for absoloutely positioned child.
    - In this case child element is '::after' pseudo element itself.
     */
    position: relative;
    display: inline-block; /* Control over stacking */
    padding: .6rem 1rem;
  
    color: rgba(206, 204, 204, 0.952);
    font-size: 1.15rem;
  
    border-bottom: 2px solid transparent;
    transition: border-color 0.3s ease, scale 0.3s ease;
}
/* Sticks border bottom to an active link */
a[data-active="true"]::after {
  width: 100%;
  left: 0; 
}
.nav-item::after {
  /* 
  - "content: ''; "  is required for the pseudo-element to be generated. 
  - It specifies what content goes inside the pseudo-element (like a text or an image).
  */
  content: '';
  position: absolute; /* Position the underline */
  height: 2px; /* Underline thickness */
  width: 0; /* Initial state for the animation. Allows to create underline growing effect. */
  left: 50%; /* Initially centering the underline. With 'width: 0;' places underline starting point at the center of the element.*/
  bottom: 0; /* Set the underline right at the bottom of an element. */
  background-color: black;
  transition: width 0.3s ease, left 0.3s ease; /* Animate width and horizontal position */
}

.nav-item:hover::after {
  width: 100%; /* Fully expanding the underline */
  left: 0;
  /* 
  'left: 0;' ensures that the growth of the underline appears to speread out symmetrically from the center to the sides.

  - Initially 'left' is set to '50%', positioning start of the '::after' pseudo-element in the center of the parent, with the width at '0'.
  - 'left' to '0' shifts the starting position to the left edge of the element.
  - Combined with 'width: 100%;' creates growth of the underline to the both sides.
   */
}
/* ********************************************* */

.nav-item:active {
  transform: scale(1.1);
}
/* footer */
footer .settings-btn,
footer .nav-item {
  font-size: .9rem;
}

/* Theme specific styles */
body {
  background-color: var(--theme-system);
}
.nav-item {
  color: var(--nav-text);
}
.nav-item::after {
  background-color: var(--nav-text);
}

#header-nav-border,
#footer-nav-border {
  border-color: var(--nav-border);
}

#header-nav-border {
  box-shadow: 0 .3rem .5rem var(--secondary-dark);
}
#footer-nav-border {
  box-shadow: 0 -.3rem .5rem var(--secondary-dark);
}

/* Settings Button */
.settings-btn {
  border: 1px solid transparent;
  border-radius: .5rem;
}

header .settings-btn {
  padding: .45rem 1.2rem;
  background-image: var(--light-bg-image
  );
}
footer .settings-btn {
  padding: .4rem .6rem;
  background-color: var(--primary-dark);
}

/* Settings Dialog */
.settings-dialog-container {
  position: relative;
}
.settings-dialog {
  position: absolute;
  top: 13%;
  left: 80%;
  margin: 0;
  width: 13rem;
  border: 1px solid transparent;
  border-radius: var(--border-radius);
  background-image: var(--dark-bg-image);
  color: var(--text);


  display: flex;
  flex-flow: column nowrap;
  justify-content: flex-start;
  align-items: flex-start;
  gap: 1rem;
}

/* toggle checkboxe - slider */
input[type="checkbox"].toggle + label {
  display: flex;
  align-items: center;
  position: relative;
}
input[type="checkbox"].toggle + label::before {
  content: "";
  width: 2rem;
  height: 1rem;
  background-image: linear-gradient(rgb(228, 173, 173),
                                    rgb(235, 198, 198),
                                    rgb(200, 161, 161),
                                    rgb(173, 125, 125));
  border-radius: 5rem;
  margin-right: .8rem;
}
input[type="checkbox"].toggle + label::after {
  position: absolute;
  display: flex;
  justify-content: center;
  align-items: center;
  color:  rgb(235, 209, 209);
  content: "\2715";
  font-size: .5rem;
  left: .1rem;
  width: .9rem;
  height: .9rem;
  background-color: rgb(201, 27, 27);
  background-image: linear-gradient(rgb(206, 2, 2), 
                                    rgb(195, 19, 19), 
                                    rgb(185, 11, 11), 
                                    rgb(167, 9, 9));
  box-shadow: 0px 0px 2.5px 0px rgb(201, 27, 27);
  border-radius: 5rem;
  transition: 200ms ease-in-out;
}
input[type="checkbox"].toggle:checked + label::before {
  background-image: linear-gradient(rgba(186, 237, 196, 0.896),
                                    rgba(215, 243, 214, 0.916),
                                    rgba(174, 216, 174, 0.937),
                                    rgba(135, 185, 142, 0.979));
}
input[type="checkbox"].toggle:checked + label::after {
  left: .9rem;
  background-image: linear-gradient(rgb(9, 163, 17), 
                                    rgb(22, 180, 54), 
                                    rgb(14, 158, 38), 
                                    rgb(9, 122, 18));
  box-shadow: 0 0 2.5px 0 rgb(47, 139, 59);
  animation: check-fade 400ms ease-in-out forwards;
}
@keyframes check-fade {
  0% {
      opacity: 1;
      content: "\2715";
  }
  50% {
      opacity: 0;
      content: "\2715";
  }
  100% {
      opacity: 1;
      content: "\2713";
  }
}
/* Hide checkboxes (boxes itself) */
input[type="checkbox"].toggle {
  opacity: 0;
  pointer-events: none;
  position: absolute;
}

/* 
If display: flex; is used in a dialog box:

display: flex; makes dialog box always visible.
This code ensures that dialog box stays hidden until 'settings' or 'rules' button is clicked.
*/
dialog:not([open]),
.hidden {
  display: none;
}

/* ********************************************************** */
/* Settings Close Button */
.close-dialog-btn {
  padding: .2rem .4rem;
  align-self: flex-end;
  border: 1px solid transparent;
  border-radius: var(--border-radius);
  background-color: var(--primary-light);
}



/* Dialog box animations */

dialog {
  animation: open-dialog-box 150ms ease-in forwards;
}
@keyframes open-dialog-box {
  0% {
      opacity: 0;
      transform: scale(0.5);
      visibility: hidden; 
  }
  100% {
      opacity: 1;
      transform: scale(1);
      visibility: visible;
  }
}
#close-dialog-animation {
  animation: close-dialog-box 100ms ease-out forwards;
}
@keyframes close-dialog-box {
    0% {
        opacity: 1;
        transform: scale(1);
        visibility: visible;  
    }
    100% {
        opacity: 0;
        transform: scale(0.5);
        visibility: hidden; 
    }
}
